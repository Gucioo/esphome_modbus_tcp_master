esphome:
  name: thermostat-pid-complete
  platform: ESP32
  board: esp32dev

wifi:
  ssid: "your_ssid"
  password: "your_password"
  fast_connect: true
  power_save_mode: none
  reboot_timeout: 0s

logger:
  level: INFO
  logs:
    modbus_tcp_manager: WARN

api:
  encryption:
    key: "your_api_key"
  reboot_timeout: 0s

ota:
  password: "your_ota_password"

esp32:
  board: esp32dev
  framework:
    type: esp-idf

external_components:
  - source: github://Gucioo/esphome_modbus_tcp_master
    components: [modbus_tcp_manager]
    refresh: 0s

modbus_tcp_manager:
  id: modbus_device
  host: "192.168.0.3"
  port: 502
  unit_id: 1

binary_sensor:
  - platform: modbus_tcp_manager
    modbus_tcp_id: modbus_device
    name: "Modbus Connection"
    id: modbus_connection
    device_class: connectivity

sensor:
  - platform: modbus_tcp_manager
    modbus_tcp_id: modbus_device
    name: "AI1 Temperature"
    id: ai1_temp
    register_address: 0
    function_code: 4
    scale: 0.1
    update_interval: 2s
    unit_of_measurement: "°C"
    device_class: "temperature"
    accuracy_decimals: 1

  - platform: modbus_tcp_manager
    modbus_tcp_id: modbus_device
    name: "AM64 Temperature"
    id: am64_temp
    register_address: 591
    function_code: 3
    scale: 0.1
    update_interval: 3s
    unit_of_measurement: "°C"
    device_class: "temperature"
    accuracy_decimals: 1

  - platform: dallas
    name: "Local Boiler Temperature"
    id: local_boiler_temp
    address: 0x1C0000031EDD2A28
    update_interval: 2s
    unit_of_measurement: "°C"
    device_class: "temperature"
    accuracy_decimals: 1
    on_value:
      then:
        - if:
            condition:
              and:
                - binary_sensor.is_on: modbus_connection
                - lambda: 'return !isnan(x);'
            then:
              - lambda: |-
                  auto *modbus = id(modbus_device);
                  if (modbus != nullptr) {
                    int16_t scaled_value = (int16_t)(x * 10);
                    bool success = modbus->write_register(501, scaled_value);
                    if (success) {
                      ESP_LOGI("main", "Wrote boiler temp: %.1f°C", x);
                    } else {
                      ESP_LOGW("main", "Failed to write boiler temp");
                    }
                  }

number:
  - platform: template
    name: "Boiler Setpoint"
    id: boiler_setpoint
    min_value: 10
    max_value: 80
    step: 0.5
    optimistic: true
    unit_of_measurement: "°C"
    set_action:
      then:
        - if:
            condition:
              binary_sensor.is_on: modbus_connection
            then:
              - lambda: |-
                  auto *modbus = id(modbus_device);
                  if (modbus != nullptr) {
                    int16_t scaled_value = (int16_t)(x * 10);
                    bool success = modbus->write_register(502, scaled_value);
                    if (success) {
                      ESP_LOGI("main", "Set setpoint: %.1f°C", x);
                    } else {
                      ESP_LOGW("main", "Failed to write setpoint");
                    }
                  }
            else:
              - logger.log: "Cannot write setpoint - Modbus offline"

  - platform: template
    name: "System Mode"
    id: system_mode
    min_value: 0
    max_value: 5
    step: 1
    optimistic: true
    set_action:
      then:
        - if:
            condition:
              binary_sensor.is_on: modbus_connection
            then:
              - lambda: |-
                  auto *modbus = id(modbus_device);
                  if (modbus != nullptr) {
                    int16_t mode_value = (int16_t)x;
                    bool success = modbus->write_register(503, mode_value);
                    if (success) {
                      ESP_LOGI("main", "Set mode: %d", mode_value);
                    } else {
                      ESP_LOGW("main", "Failed to write mode");
                    }
                  }

switch:
  - platform: template
    name: "Boiler Enable"
    id: boiler_enable
    optimistic: true
    turn_on_action:
      - if:
          condition:
            binary_sensor.is_on: modbus_connection
          then:
            - lambda: |-
                auto *modbus = id(modbus_device);
                if (modbus != nullptr) {
                  bool success = modbus->write_register(504, 1);
                  if (success) {
                    ESP_LOGI("main", "Boiler ON");
                  } else {
                    ESP_LOGW("main", "Failed to turn on boiler");
                  }
                }
          else:
            - logger.log: "Cannot turn on - Modbus offline"
    turn_off_action:
      - lambda: |-
          auto *modbus = id(modbus_device);
          if (modbus != nullptr) {
            bool success = modbus->write_register(504, 0);
            if (success) {
              ESP_LOGI("main", "Boiler OFF");
            } else {
              ESP_LOGW("main", "Failed to turn off boiler");
            }
          }

text_sensor:
  - platform: template
    name: "System Status"
    id: system_status
    update_interval: 5s
    lambda: |-
      if (!id(modbus_connection).state) {
        return {"Modbus Offline"};
      } else if (isnan(id(ai1_temp).state) && isnan(id(am64_temp).state)) {
        return {"No Data"};
      } else if (id(boiler_enable).state) {
        return {"Running - " + to_string(id(boiler_setpoint).state) + "°C"};
      } else {
        return {"Standby"};
      }

button:
  - platform: template
    name: "Send Settings"
    on_press:
      then:
        - if:
            condition:
              binary_sensor.is_on: modbus_connection
            then:
              - lambda: |-
                  auto *modbus = id(modbus_device);
                  if (modbus != nullptr) {
                    std::vector<int16_t> values = {
                      (int16_t)(id(boiler_setpoint).state * 10),
                      id(boiler_enable).state ? 1 : 0
                    };
                    bool success = modbus->write_registers(600, values);
                    if (success) {
                      ESP_LOGI("main", "Bulk write OK");
                    } else {
                      ESP_LOGW("main", "Bulk write failed");
                    }
                  }
            else:
              - logger.log: "Cannot send - Modbus offline"

interval:
  - interval: 60s
    then:
      - lambda: |-
          ESP_LOGI("health", "ESP32 OK | Heap: %d | Modbus: %s", 
                   esp_get_free_heap_size(),
                   id(modbus_connection).state ? "OK" : "OFFLINE");
